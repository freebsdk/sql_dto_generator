using System.Text;

namespace sqlc;

public class GeneratorForTypescript : IScriptGenerator
{
    private readonly Dictionary<IdlFieldType, string /* native type */> _nativeTypes = new();
    private readonly StringBuilder _genCode = new();




    public GeneratorForTypescript()
    {
        _nativeTypes[IdlFieldType.INT32] = "number";
        _nativeTypes[IdlFieldType.INT64] = "bigint";
        _nativeTypes[IdlFieldType.FLOAT] = "number";
        _nativeTypes[IdlFieldType.DATETIME] = "string";
        _nativeTypes[IdlFieldType.VARCHAR] = "string";
        _nativeTypes[IdlFieldType.TEXT] = "string";
        _nativeTypes[IdlFieldType.LONGTEXT] = "string";
    }




    public override void Open()
    {
        _genCode.Clear();

        _genCode.Append("// DO NOT EDIT : This file is generated by the sqlc\n");
        _genCode.Append("import { RowDataPacket } from \"mysql2\"\n");
        _genCode.Append("\n");
    }




    public override void Close()
    {
        _genCode.Append("\n");
    }




    public override void GenerateTable(TableInfo tableInfo)
    {
        _genCode.Append("\n");

        var upperTableName = tableInfo.Name.ToUpper();

        _genCode.Append("\n");
        _genCode.Append($"// {tableInfo.Name} : {tableInfo.Desc}\n");

        _genCode.Append($"export interface {upperTableName}_DTO extends RowDataPacket {{\n");
        foreach (var columnInfo in tableInfo.Columns)
            _genCode.Append(
                $"\t{columnInfo.Name}: {convertNativeType(columnInfo.Type)}\t\t// {columnInfo.Desc} {getPkInfo(tableInfo, columnInfo)}\n");
        _genCode.Append("}\n");

        addMetaHelper(tableInfo, _genCode);
        addParameterBuilder(tableInfo, _genCode);
    }




    private void addMetaHelper(TableInfo tableInfo, StringBuilder sb)
    {
        var cols = string.Join(",", tableInfo.Columns.Select(e => e.Name));
        var vals = string.Join(",", tableInfo.Columns.Select(e => "?"));

        _genCode.Append(
            $"export const {tableInfo.UpperTableName()}_NAME = \"{tableInfo.Database}.{tableInfo.Name}\";\n");
        _genCode.Append($"export const {tableInfo.UpperTableName()}_COLS = \"{cols}\";\n");
        _genCode.Append($"export const {tableInfo.UpperTableName()}_VALS = \"{vals}\";\n");
    }




    private void addParameterBuilder(TableInfo tableInfo, StringBuilder sb)
    {
        var tsParams = string.Join(", ", tableInfo.Columns.Select(e => $"{e.Name}: {convertNativeType(e.Type)}"));

        sb.Append($"export function BUILD_VALUES_{tableInfo.UpperTableName()}_DTO ({tsParams}) {{\n");
        sb.Append("\tlet params = [];\n");
        foreach (var column in tableInfo.Columns) sb.Append($"\tparams.push({column.Name});\n");
        sb.Append("\treturn params;\n");
        sb.Append("}\n");
    }




    public override string GetGeneratedCode()
    {
        return _genCode.ToString();
    }




    // primary key 정보를 얻는다
    private string getPkInfo(TableInfo tableInfo, ColumnInfo columnInfo)
    {
        var ret = tableInfo.IsPrimaryKey(columnInfo.Name);
        if (ret.isPrimaryKey) return $"(PK #{ret.posIndex})";

        return "";
    }




    private string convertNativeType(string type)
    {
        var idlFieldType = Enum.Parse<IdlFieldType>(type.ToUpper());

        if (_nativeTypes.TryGetValue(idlFieldType, out var nativeTypeStr))
            return nativeTypeStr;

        throw new Exception($"Not handled idl field type ... (Type: {type})");
    }
}